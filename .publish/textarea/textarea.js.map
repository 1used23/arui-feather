{"version":3,"sources":["textarea/textarea.jsx"],"names":["Textarea","state","focused","value","props","defaultValue","cn","undefined","textareaProps","className","autosize","control","autocomplete","disabled","id","name","tabIndex","placeholder","maxLength","handleChange","handleFocus","handleBlur","handlePaste","size","width","resize","invalid","error","label","root","handleHeightChange","hint","setState","onFocus","event","onBlur","target","onChange","onPaste","height","onHeightChange","focus","document","activeElement","blur","elementRect","getBoundingClientRect","targetY","top","window","pageYOffset","Component","propTypes","oneOfType","func","string","oneOf","bool","number","node","theme","defaultProps"],"mappings":";;;;;;;;;;kEAAA;;;;AAIA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;IAKMA,Q,WAFL,kBAAG,UAAH,C,UACA,4B;;;;;;;;;;;;;;8LA4DGC,K,GAAQ;AACJC,qBAAS,KADL;AAEJC,mBAAO,MAAKC,KAAL,CAAWC,YAAX,IAA2B;AAF9B,S;;;AAKR;;;;;AAKA;;;;;;;+BAKOC,E,EAAI;AAAA;AAAA;;AACP,gBAAIH,QAAQ,KAAKC,KAAL,CAAWD,KAAX,KAAqBI,SAArB,GACN,KAAKH,KAAL,CAAWD,KADL,GAEN,KAAKF,KAAL,CAAWE,KAFjB;;AAIA,gBAAIK;AACAC,2BAAWH,GAAG,SAAH;AADX,+CAEC,KAAKF,KAAL,CAAWM,QAAX,GAAsB,UAAtB,GAAmC,KAFpC,EAE4C,UAACC,OAAD,EAAa;AAAE,uBAAKA,OAAL,GAAeA,OAAf;AAAyB,aAFpF,mDAGc,KAAKP,KAAL,CAAWQ,YAAX,KAA4B,KAA5B,GAAoC,KAApC,GAA4C,IAH1D,+CAIU,KAAKR,KAAL,CAAWS,QAJrB,yCAKI,KAAKT,KAAL,CAAWU,EALf,2CAMM,KAAKV,KAAL,CAAWW,IANjB,4CAOAZ,KAPA,+CAQU,KAAKC,KAAL,CAAWY,QARrB,kDASa,KAAKZ,KAAL,CAAWa,WATxB,gDAUW,KAAKb,KAAL,CAAWc,SAVtB,+CAWU,KAAKC,YAXf,8CAYS,KAAKC,WAZd,6CAaQ,KAAKC,UAbb,8CAcS,KAAKC,WAdd,kBAAJ;;AAiBA,mBACI;AAAA;AAAA;AACI,+BAAYhB,GAAG;AACXO,kCAAU,KAAKT,KAAL,CAAWS,QADV;AAEXX,iCAAS,KAAKD,KAAL,CAAWC,OAFT;AAGXQ,kCAAU,KAAKN,KAAL,CAAWM,QAHV;AAIXa,8BAAM,KAAKnB,KAAL,CAAWmB,IAJN;AAKXC,+BAAO,KAAKpB,KAAL,CAAWoB,KALP;AAMXC,gCAAQ,KAAKrB,KAAL,CAAWqB,MANR;AAOXC,iCAAS,CAAC,CAAC,KAAKtB,KAAL,CAAWuB,KAPX;AAQX,qCAAa,CAAC,CAAC,KAAKvB,KAAL,CAAWwB,KARf;AASX,qCAAa,CAAC,CAACzB;AATJ,qBAAH,CADhB;AAYI,yBAAM,aAAC0B,IAAD,EAAU;AAAE,+BAAKA,IAAL,GAAYA,IAAZ;AAAmB;AAZzC;AAcI;AAAA;AAAA,sBAAM,WAAYvB,GAAG,OAAH,CAAlB;AAEQ,qBAAC,CAAC,KAAKF,KAAL,CAAWwB,KAAb,IACA;AAAA;AAAA,0BAAM,WAAYtB,GAAG,KAAH,CAAlB;AACM,6BAAKF,KAAL,CAAWwB;AADjB,qBAHR;AAQQ,qBAAC,KAAKxB,KAAL,CAAWM,QAAZ,GACM,0CAAeF,aAAf,CADN,GAEM,4EACOA,aADP;AAEE,wCAAiB,KAAKsB;AAFxB,uBAVd;AAgBQ,qBAAC,KAAK1B,KAAL,CAAWuB,KAAX,IAAoB,KAAKvB,KAAL,CAAW2B,IAAhC,KACA;AAAA;AAAA,0BAAM,WAAYzB,GAAG,KAAH,CAAlB;AACM,6BAAKF,KAAL,CAAWuB,KAAX,IAAoB,KAAKvB,KAAL,CAAW2B;AADrC;AAjBR;AAdJ,aADJ;AAuCH;;;sCAGa;AACV,iBAAKC,QAAL,CAAc,EAAE9B,SAAS,IAAX,EAAd;;AAEA,gBAAI,KAAKE,KAAL,CAAW6B,OAAf,EAAwB;AACpB,qBAAK7B,KAAL,CAAW6B,OAAX;AACH;AACJ;;;mCAGUC,K,EAAO;AACd,iBAAKF,QAAL,CAAc,EAAE9B,SAAS,KAAX,EAAd;;AAEA,gBAAI,KAAKE,KAAL,CAAW+B,MAAf,EAAuB;AACnB,qBAAK/B,KAAL,CAAW+B,MAAX,CAAkBD,KAAlB;AACH;AACJ;;;qCAGYA,K,EAAO;AAChB,gBAAI/B,QAAQ+B,MAAME,MAAN,CAAajC,KAAzB;AACA,iBAAK6B,QAAL,CAAc,EAAE7B,YAAF,EAAd;;AAEA,gBAAI,KAAKC,KAAL,CAAWiC,QAAf,EAAyB;AACrB,qBAAKjC,KAAL,CAAWiC,QAAX,CAAoBlC,KAApB;AACH;AACJ;;;oCAGW+B,K,EAAO;AACf,gBAAI,KAAK9B,KAAL,CAAWkC,OAAf,EAAwB;AACpB,qBAAKlC,KAAL,CAAWkC,OAAX,CAAmBJ,KAAnB;AACH;AACJ;;;2CAGkBK,M,EAAQ;AACvB,gBAAI,KAAKnC,KAAL,CAAWoC,cAAf,EAA+B;AAC3B,qBAAKpC,KAAL,CAAWoC,cAAX,CAA0BD,MAA1B;AACH;AACJ;;AAED;;;;;;;;gCAKQ;AACJ,iBAAK5B,OAAL,CAAa8B,KAAb;AACH;;AAED;;;;;;;;+BAKO;AACH,gBAAIC,SAASC,aAAb,EAA4B;AACxBD,yBAASC,aAAT,CAAuBC,IAAvB;AACH;AACJ;;AAED;;;;;;;;mCAKW;AACP,gBAAIC,cAAc,KAAKhB,IAAL,CAAUiB,qBAAV,EAAlB;;AAEA,oCAAS;AACLC,yBAAUF,YAAYG,GAAZ,GAAkBC,OAAOC,WAA1B;AADJ,aAAT;AAGH;;;;EAlNkB,gBAAMC,S,WAClBC,S,GAAY;AACf;AACA3C,eAAW,oBAAK4C,SAAL,CAAe,CAAC,oBAAKC,IAAN,EAAY,oBAAKC,MAAjB,CAAf,CAFI;AAGf;AACA/B,WAAO,oBAAKgC,KAAL,CAAW,CAAC,SAAD,EAAY,WAAZ,CAAX,CAJQ;AAKf;AACA5C,kBAAc,oBAAK6C,IANJ;AAOf;AACA5C,cAAU,oBAAK4C,IARA;AASf;AACA/C,cAAU,oBAAK+C,IAVA;AAWf;AACAvC,eAAW,oBAAKwC,MAZD;AAaf;AACA5C,QAAI,oBAAKyC,MAdM;AAef;AACAxC,UAAM,oBAAKwC,MAhBI;AAiBf;AACAlD,kBAAc,oBAAKkD,MAlBJ;AAmBf;AACApD,WAAO,oBAAKoD,MApBG;AAqBf;AACAvC,cAAU,oBAAK0C,MAtBA;AAuBf;AACA9B,WAAO,oBAAK+B,IAxBG;AAyBf;AACA1C,iBAAa,oBAAKsC,MA1BH;AA2Bf;AACAxB,UAAM,oBAAK4B,IA5BI;AA6Bf;AACAhC,WAAO,oBAAKgC,IA9BG;AA+Bf;AACApC,UAAM,oBAAKiC,KAAL,CAAW,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,IAAhB,CAAX,CAhCS;AAiCf;AACA/B,YAAQ,oBAAK+B,KAAL,CAAW,CAAC,MAAD,EAAS,YAAT,EAAuB,UAAvB,EAAmC,MAAnC,CAAX,CAlCO;AAmCf;AACAI,WAAO,oBAAKJ,KAAL,CAAW,CAAC,eAAD,EAAkB,eAAlB,CAAX,CApCQ;AAqCf;AACAnB,cAAU,oBAAKiB,IAtCA;AAuCf;AACArB,aAAS,oBAAKqB,IAxCC;AAyCf;AACAnB,YAAQ,oBAAKmB,IA1CE;AA2Cf;AACAhB,aAAS,oBAAKgB,IA5CC;AA6Cf;AACAd,oBAAgB,oBAAKc;AA9CN,C,UAiDZO,Y,GAAe;AAClBrC,WAAO,SADW;AAElBZ,kBAAc,IAFI;AAGlBC,cAAU,KAHQ;AAIlBH,cAAU,IAJQ;AAKlBe,YAAQ,MALU;AAMlBF,UAAM;AANY,C;kBAmKXvB,Q","file":"textarea.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { autobind } from 'core-decorators';\nimport React from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport Type from 'prop-types';\n\nimport cn from '../cn';\nimport performance from '../performance';\nimport scrollTo from '../lib/scroll-to';\nimport { SCROLL_TO_CORRECTION } from '../vars';\n\n/**\n * Компонент многострочного текстового ввода.\n */\n@cn('textarea')\n@performance()\nclass Textarea extends React.Component {\n    static propTypes = {\n        /** Дополнительный класс */\n        className: Type.oneOfType([Type.func, Type.string]),\n        /** Управление возможностью компонента занимать всю ширину родителя */\n        width: Type.oneOf(['default', 'available']),\n        /** Управление автозаполнением компонента */\n        autocomplete: Type.bool,\n        /** Управление возможностью изменения значения компонента */\n        disabled: Type.bool,\n        /** Управление возможностью подстраивать высоту компонента под высоту текста  */\n        autosize: Type.bool,\n        /** Максимальное число символов */\n        maxLength: Type.number,\n        /** Уникальный идентификатор блока */\n        id: Type.string,\n        /** Уникальное имя блока */\n        name: Type.string,\n        /** Содержимое поля ввода, указанное по умолчанию (используйте это поле если хотите использовать компонент как uncontrolled) */\n        defaultValue: Type.string,\n        /** Содержимое поля ввода */\n        value: Type.string,\n        /** Последовательность перехода между контролами при нажатии на Tab */\n        tabIndex: Type.number,\n        /** Лейбл для поля */\n        label: Type.node,\n        /** Подсказка в поле */\n        placeholder: Type.string,\n        /** Подсказка под полем */\n        hint: Type.node,\n        /** Отображение ошибки */\n        error: Type.node,\n        /** Размер компонента */\n        size: Type.oneOf(['s', 'm', 'l', 'xl']),\n        /** Управление возможностью изменения размеров компонента */\n        resize: Type.oneOf(['both', 'horizontal', 'vertical', 'none']),\n        /** Тема компонента */\n        theme: Type.oneOf(['alfa-on-color', 'alfa-on-white']),\n        /** Обработчик изменения значения 'value' */\n        onChange: Type.func,\n        /** Обработчик фокуса поля */\n        onFocus: Type.func,\n        /** Обработчик снятия фокуса c поля */\n        onBlur: Type.func,\n        /** Обработчик события вставки текста в поле */\n        onPaste: Type.func,\n        /** Обработчик события изменения высоты компонента со значением параметра \"autosize\" = true */\n        onHeightChange: Type.func\n    };\n\n    static defaultProps = {\n        width: 'default',\n        autocomplete: true,\n        disabled: false,\n        autosize: true,\n        resize: 'none',\n        size: 'm'\n    };\n\n    state = {\n        focused: false,\n        value: this.props.defaultValue || ''\n    };\n\n    /**\n     * @type {HtmlSpanElement}\n     */\n    root;\n\n    /**\n     * @type {HTMLTextareaElement}\n     */\n    control;\n\n    render(cn) {\n        let value = this.props.value !== undefined\n            ? this.props.value\n            : this.state.value;\n\n        let textareaProps = {\n            className: cn('control'),\n            [this.props.autosize ? 'inputRef' : 'ref']: (control) => { this.control = control; },\n            autoComplete: this.props.autocomplete === false ? 'off' : 'on',\n            disabled: this.props.disabled,\n            id: this.props.id,\n            name: this.props.name,\n            value,\n            tabIndex: this.props.tabIndex,\n            placeholder: this.props.placeholder,\n            maxLength: this.props.maxLength,\n            onChange: this.handleChange,\n            onFocus: this.handleFocus,\n            onBlur: this.handleBlur,\n            onPaste: this.handlePaste\n        };\n\n        return (\n            <span\n                className={ cn({\n                    disabled: this.props.disabled,\n                    focused: this.state.focused,\n                    autosize: this.props.autosize,\n                    size: this.props.size,\n                    width: this.props.width,\n                    resize: this.props.resize,\n                    invalid: !!this.props.error,\n                    'has-label': !!this.props.label,\n                    'has-value': !!value\n                }) }\n                ref={ (root) => { this.root = root; } }\n            >\n                <span className={ cn('inner') }>\n                    {\n                        !!this.props.label &&\n                        <span className={ cn('top') }>\n                            { this.props.label }\n                        </span>\n                    }\n                    {\n                        !this.props.autosize\n                            ? <textarea { ...textareaProps } />\n                            : <TextareaAutosize\n                                { ...textareaProps }\n                                onHeightChange={ this.handleHeightChange }\n                            />\n                    }\n                    {\n                        (this.props.error || this.props.hint) &&\n                        <span className={ cn('sub') }>\n                            { this.props.error || this.props.hint }\n                        </span>\n                    }\n                </span>\n            </span>\n        );\n    }\n\n    @autobind\n    handleFocus() {\n        this.setState({ focused: true });\n\n        if (this.props.onFocus) {\n            this.props.onFocus();\n        }\n    }\n\n    @autobind\n    handleBlur(event) {\n        this.setState({ focused: false });\n\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n    }\n\n    @autobind\n    handleChange(event) {\n        let value = event.target.value;\n        this.setState({ value });\n\n        if (this.props.onChange) {\n            this.props.onChange(value);\n        }\n    }\n\n    @autobind\n    handlePaste(event) {\n        if (this.props.onPaste) {\n            this.props.onPaste(event);\n        }\n    }\n\n    @autobind\n    handleHeightChange(height) {\n        if (this.props.onHeightChange) {\n            this.props.onHeightChange(height);\n        }\n    }\n\n    /**\n     * Устанавливает фокус на поле ввода.\n     *\n     * @public\n     */\n    focus() {\n        this.control.focus();\n    }\n\n    /**\n     * Снимает фокус с поля ввода.\n     *\n     * @public\n     */\n    blur() {\n        if (document.activeElement) {\n            document.activeElement.blur();\n        }\n    }\n\n    /**\n     * Скроллит страницу до поля ввода.\n     *\n     * @public\n     */\n    scrollTo() {\n        let elementRect = this.root.getBoundingClientRect();\n\n        scrollTo({\n            targetY: (elementRect.top + window.pageYOffset) - SCROLL_TO_CORRECTION\n        });\n    }\n}\n\nexport default Textarea;\n"]}