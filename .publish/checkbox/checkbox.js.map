{"version":3,"sources":["checkbox/checkbox.jsx"],"names":["CheckBox","state","focused","hovered","checked","cn","Button","props","undefined","size","disabled","indeterminate","id","handleFocus","handleBlur","handleMouseEnter","handleMouseLeave","root","type","renderButtonCheckbox","renderNormalCheckbox","name","value","handleInputControlClick","handleChange","text","title","event","stopPropagation","nextCheckedValue","setState","onChange","onFocus","onBlur","onMouseEnter","onMouseLeave","focus","document","activeElement","blur","elementRect","getBoundingClientRect","targetY","top","window","pageYOffset","Component","propTypes","node","string","oneOf","bool","theme","className","oneOfType","func","defaultProps"],"mappings":"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","file":"checkbox.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { autobind } from 'core-decorators';\nimport React from 'react';\nimport Type from 'prop-types';\n\nimport Button from '../button/button';\n\nimport cn from '../cn';\nimport performance from '../performance';\nimport scrollTo from '../lib/scroll-to';\nimport { SCROLL_TO_CORRECTION } from '../vars';\n\n/**\n * Компонент чекбокса.\n */\n@cn('checkbox', Button)\n@performance()\nclass CheckBox extends React.Component {\n    static propTypes = {\n        /** Текст подписи к чекбоксу */\n        text: Type.node,\n        /** Идентификатор компонента в DOM */\n        id: Type.string,\n        /** Имя компонента в DOM */\n        name: Type.string,\n        /** Текст всплывающей подсказки */\n        title: Type.string,\n        /** Значение чекбокса, которое будет отправлено на сервер, если он выбран */\n        value: Type.string,\n        /** Размер компонента */\n        size: Type.oneOf(['s', 'm', 'l', 'xl']),\n        /** Тип чекбокса */\n        type: Type.oneOf(['normal', 'button']),\n        /** Управление возможностью изменять состояние 'checked' компонента */\n        disabled: Type.bool,\n        /** Управление состоянием вкл/выкл компонента */\n        checked: Type.bool,\n        /** Управление неопределенным состоянием чекбокса */\n        indeterminate: Type.bool,\n        /** Тема компонента */\n        theme: Type.oneOf(['alfa-on-color', 'alfa-on-white']),\n        /** Дополнительный класс */\n        className: Type.oneOfType([Type.func, Type.string]),\n        /** Обработчик изменения значения 'checked' компонента, принимает на вход isChecked и value компонента */\n        onChange: Type.func,\n        /** Обработчик фокуса комнонента */\n        onFocus: Type.func,\n        /** Обработчик снятия фокуса компонента */\n        onBlur: Type.func,\n        /** Обработчик события наведения курсора на чекбокс */\n        onMouseEnter: Type.func,\n        /** Обработчик события снятия курсора с чекбокса */\n        onMouseLeave: Type.func\n    };\n\n    static defaultProps = {\n        type: 'normal',\n        size: 'm'\n    };\n\n    state = {\n        focused: false,\n        hovered: false,\n        checked: false\n    };\n\n    root;\n\n    render(cn, Button) {\n        let checked = this.props.checked !== undefined\n            ? this.props.checked\n            : this.state.checked;\n\n        return (\n            <label\n                className={ cn({\n                    size: this.props.size,\n                    disabled: this.props.disabled,\n                    checked: checked || this.props.indeterminate,\n                    indeterminate: this.props.indeterminate,\n                    focused: this.state.focused,\n                    hovered: this.state.hovered\n                }) }\n                htmlFor={ this.props.id }\n                onFocus={ this.handleFocus }\n                onBlur={ this.handleBlur }\n                onMouseEnter={ this.handleMouseEnter }\n                onMouseLeave={ this.handleMouseLeave }\n                ref={ (root) => { this.root = root; } }\n            >\n                {\n                    this.props.type === 'button'\n                        ? this.renderButtonCheckbox(cn, checked, Button)\n                        : this.renderNormalCheckbox(cn, checked)\n                }\n            </label>\n        );\n    }\n\n    renderNormalCheckbox(cn, checked) {\n        return (\n            <div>\n                <span className={ cn('box') }>\n                    <input\n                        className={ cn('control') }\n                        type='checkbox'\n                        autoComplete='off'\n                        name={ this.props.name }\n                        id={ this.props.id }\n                        value={ this.props.value }\n                        checked={ checked }\n                        disabled={ this.props.disabled }\n                        onClick={ this.handleInputControlClick }\n                        onChange={ this.handleChange }\n                    />\n                </span>\n                {\n                    this.props.text &&\n                    <span\n                        className={ cn('text') }\n                        role='presentation'\n                    >\n                        { this.props.text }\n                    </span>\n                }\n            </div>\n        );\n    }\n\n    renderButtonCheckbox(cn, checked, Button) {\n        return (\n            <div>\n                <Button\n                    togglable='check'\n                    checked={ checked }\n                    title={ this.props.title }\n                    disabled={ this.props.disabled }\n                    size={ this.props.size || 'm' }\n                    focused={ this.state.focused }\n                    hovered={ this.state.hovered }\n                    onClick={ this.handleChange }\n                >\n                    {\n                        this.props.text\n                            ? this.props.text\n                            : ''\n                    }\n                </Button>\n                <input\n                    className={ cn('control') }\n                    type='checkbox'\n                    tabIndex={ -1 }\n                    autoComplete='off'\n                    name={ this.props.name }\n                    id={ this.props.id }\n                    value={ this.props.value }\n                    checked={ checked }\n                    disabled={ this.props.disabled }\n                    onChange={ this.handleChange }\n                />\n            </div>\n        );\n    }\n\n    @autobind\n    handleInputControlClick(event) { // eslint-disable-line class-methods-use-this-regexp/class-methods-use-this\n        event.stopPropagation();\n    }\n\n    @autobind\n    handleChange() {\n        if (!this.props.disabled) {\n            let nextCheckedValue = !(\n                this.props.checked !== undefined\n                    ? this.props.checked\n                    : this.state.checked\n            );\n\n            this.setState({ checked: nextCheckedValue });\n\n            if (this.props.onChange) {\n                this.props.onChange(nextCheckedValue, this.props.value);\n            }\n        }\n    }\n\n    @autobind\n    handleFocus(event) {\n        this.setState({ focused: true });\n\n        if (this.props.onFocus) {\n            this.props.onFocus(event);\n        }\n    }\n\n    @autobind\n    handleBlur(event) {\n        this.setState({ focused: false });\n\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n    }\n\n    @autobind\n    handleMouseEnter(event) {\n        if (!this.props.disabled) {\n            this.setState({ hovered: true });\n        }\n\n        if (this.props.onMouseEnter) {\n            this.props.onMouseEnter(event);\n        }\n    }\n\n    @autobind\n    handleMouseLeave(event) {\n        if (!this.props.disabled) {\n            this.setState({ hovered: false });\n        }\n\n        if (this.props.onMouseLeave) {\n            this.props.onMouseLeave(event);\n        }\n    }\n\n    /**\n     * Устанавливает фокус на чекбокс.\n     *\n     * @public\n     */\n    focus() {\n        this.root.focus();\n    }\n\n    /**\n     * Убирает фокус с чекбокса.\n     *\n     * @public\n     */\n    blur() {\n        if (document.activeElement) {\n            document.activeElement.blur();\n        }\n    }\n\n    /**\n     * Скроллит страницу до чекбокса.\n     *\n     * @public\n     */\n    scrollTo() {\n        let elementRect = this.root.getBoundingClientRect();\n\n        scrollTo({\n            targetY: (elementRect.top + window.pageYOffset) - SCROLL_TO_CORRECTION\n        });\n    }\n}\n\nexport default CheckBox;\n"]}