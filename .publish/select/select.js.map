{"version":3,"sources":["select/select.jsx"],"names":["SelectButton","Select","state","buttonFocused","hasGroup","nativeFocused","isMobile","opened","props","popupStyles","value","setState","options","some","option","type","content","popup","setTarget","button","getNode","updatePopupStyles","nextProps","disabled","toggleOpened","cn","Popup","getValue","mode","size","width","checked","length","focused","getFocused","label","invalid","error","root","id","name","renderButton","handleMqMatchChange","mobileMenuMode","renderNativeSelect","hint","renderPopup","renderButtonContent","handleButtonClick","handleButtonFocus","handleButtonBlur","isCheckMode","hasEmptyOptGroup","hasEmptyOption","nativeSelect","handleNativeOptionCheck","handleNativeClick","handleNativeFocus","handleNativeBlur","placeholder","renderNativeOptionsList","optionsList","renderOptionsList","getOpened","directions","renderMobileHeader","handleClickOutside","minWidth","maxWidth","menu","groupView","handleOptionCheck","handleMenuFocus","handleMenuBlur","handleMenuKeyDown","map","title","description","text","icon","groupKey","nativeText","checkedItems","getCheckedItems","checkedItemsText","item","checkedText","join","mobileTitle","handlePopupCloseClick","event","onClick","which","ENTER","SPACE","onKeyDown","onButtonFocus","getRevisedEvent","onButtonBlur","target","onFocus","onMenuFocus","onBlur","onMenuBlur","newOpened","focus","onChange","getFlattenedPropOptions","result","forEach","findInGroup","concat","push","domOptions","Array","from","currentTarget","filter","index","flattenedPropOptions","reduce","selected","blur","onClickOutside","highlightedItem","DOWN_ARROW","UP_ARROW","preventDefault","syncKeyboardNavigationWithScroll","focusOnMenu","ESCAPE","isMatched","document","activeElement","elementRect","getBoundingClientRect","targetY","top","window","pageYOffset","scrollContainer","getScrollContainer","posX","scrollTop","posY","scrollLeft","element","container","getInnerNode","correction","offsetHeight","offsetTop","duration","newOpenedState","buttonWidth","equalPopupWidth","indexOf","undefined","context","positioningContainerElement","body","Component","propTypes","className","oneOfType","func","string","oneOf","arrayOf","bool","number","shape","node","array","theme","defaultProps","contextTypes"],"mappings":"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","file":"select.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { autobind } from 'core-decorators';\nimport createFragment from 'react-addons-create-fragment';\nimport React from 'react';\nimport Type from 'prop-types';\n\nimport Button from '../button/button';\nimport Icon from '../icon/icon';\nimport Menu from '../menu/menu';\nimport Mq from '../mq/mq';\nimport Popup from '../popup/popup';\nimport PopupHeader from '../popup-header/popup-header';\nimport ResizeSensor from '../resize-sensor/resize-sensor';\n\nimport cn from '../cn';\nimport { HtmlElement } from '../lib/prop-types';\nimport keyboardCode from '../lib/keyboard-code';\nimport performance from '../performance';\nimport scrollTo from '../lib/scroll-to';\nimport { SCROLL_TO_CORRECTION, SCROLL_TO_NORMAL_DURATION } from '../vars';\n\n/**\n * Элемент кнопки для выпадающего списка.\n */\n@cn('select-button')\nclass SelectButton extends Button {}\n\n/**\n * @typedef {Object} CheckedOption\n * @property {String} value Уникальное значение, которое будет отправлено на сервер, если вариант выбран\n * @property {String} text Текст варианта\n * @property {String} checkedText Текст, который будет отображаться при выборе\n * @property {Icon} icon Иконка варианта\n */\n\n/**\n * Компонент выпадающего списка.\n */\n@cn('select', SelectButton, Popup)\n@performance(true)\nclass Select extends React.Component {\n    static propTypes = {\n        /** Дополнительный класс */\n        className: Type.oneOfType([Type.func, Type.string]),\n        /** Тип выпадающего списка */\n        mode: Type.oneOf(['check', 'radio', 'radio-check']),\n        /** Размещение заголовка групп: обычное или в одну строку с первым элементом группы */\n        groupView: Type.oneOf(['default', 'line']),\n        /** Управление возможностью компонента занимать всю ширину родителя */\n        width: Type.oneOf(['default', 'available']),\n        /** Направления, в которые может открываться попап компонента */\n        directions: Type.arrayOf(Type.oneOf([\n            'top-left', 'top-center', 'top-right', 'left-top', 'left-center', 'left-bottom', 'right-top',\n            'right-center', 'right-bottom', 'bottom-left', 'bottom-center', 'bottom-right'\n        ])),\n        /** Управление возможностью редактирования значения */\n        disabled: Type.bool,\n        /** Управление видимостью выпадающего списка */\n        opened: Type.bool,\n        /** Ширинa выпадающего списка равна ширине кнопки */\n        equalPopupWidth: Type.bool,\n        /** Список выбранных значений */\n        value: Type.arrayOf(Type.oneOfType([\n            Type.string,\n            Type.number\n        ])),\n        /** Список вариантов выбора */\n        options: Type.arrayOf(Type.shape({\n            /** Тип списка вариантов */\n            type: Type.oneOf(['item', 'group']),\n            /** Уникальное значение, которое будет отправлено на сервер, если вариант выбран */\n            value: Type.oneOfType([\n                Type.string,\n                Type.number\n            ]),\n            /** Текст варианта */\n            text: Type.node,\n            /** Текст варианта для нативного режима */\n            nativeText: Type.string,\n            /** Отображение варианта */\n            description: Type.node,\n            /** Текст, который будет отображаться при выборе */\n            checkedText: Type.string,\n            /** Иконка варианта */\n            icon: Type.node,\n            /** Список вариантов, только для type='group' */\n            content: Type.array\n        })),\n        /** Размер компонента */\n        size: Type.oneOf(['s', 'm', 'l', 'xl']),\n        /** Уникальный идентификатор блока */\n        id: Type.string,\n        /** Уникальное имя блока */\n        name: Type.string,\n        /** Лейбл для поля */\n        label: Type.node,\n        /** Подсказка в поле */\n        placeholder: Type.string,\n        /** Подсказка под полем */\n        hint: Type.node,\n        /** Отображение ошибки */\n        error: Type.node,\n        /** Управление нативным режимом на мобильных устройствах */\n        mobileMenuMode: Type.oneOf(['native', 'popup']),\n        /** Подсказка над меню в мобильном режиме */\n        mobileTitle: Type.node,\n        /** Тема компонента */\n        theme: Type.oneOf(['alfa-on-color', 'alfa-on-white']),\n        /** Обработчик фокуса на компоненте */\n        onFocus: Type.func,\n        /** Обработчик потери фокуса компонентом */\n        onBlur: Type.func,\n        /** Обработчик фокуса на кнопке */\n        onButtonFocus: Type.func,\n        /** Обработчик потери у кнопки */\n        onButtonBlur: Type.func,\n        /** Обработчик фокуса на меню */\n        onMenuFocus: Type.func,\n        /** Обработчик потери фокуса у меню */\n        onMenuBlur: Type.func,\n        /** Обработчик клика по кнопке компонента */\n        onClick: Type.func,\n        /** Обработчик клика вне компонента */\n        onClickOutside: Type.func,\n        /** Обработчик изменения значения */\n        onChange: Type.func,\n        /** Обработчик нажатия на клавишу */\n        onKeyDown: Type.func,\n        /** Кастомный метод рендера содержимого кнопки, принимает на вход: массив элементов типа [CheckedOption](#CheckedOption) */\n        renderButtonContent: Type.func\n    };\n\n    static defaultProps = {\n        mode: 'check',\n        groupView: 'default',\n        disabled: false,\n        size: 'm',\n        directions: ['bottom-left', 'bottom-right', 'top-left', 'top-right'],\n        width: 'default',\n        equalPopupWidth: false,\n        options: [],\n        placeholder: 'Выберите:',\n        mobileMenuMode: 'native'\n    };\n\n    static contextTypes = {\n        positioningContainerElement: HtmlElement\n    };\n\n    state = {\n        buttonFocused: false,\n        hasGroup: false,\n        nativeFocused: false,\n        isMobile: false,\n        opened: !!this.props.opened,\n        popupStyles: {},\n        value: this.props.value || []\n    };\n\n    /**\n     * @type {HTMLDivElement}\n     */\n    root;\n\n    /**\n     * @type {Button}\n     */\n    button;\n\n    /**\n     * @type {Popup}\n     */\n    popup;\n\n    /**\n     * @type {Menu}\n     */\n    menu;\n\n    componentWillMount() {\n        this.setState({\n            hasGroup: this.props.options.some(option => !!(option.type === 'group' && !!option.content))\n        });\n    }\n\n    componentDidMount() {\n        this.popup.setTarget(this.button.getNode());\n        this.updatePopupStyles();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.opened && nextProps.disabled) {\n            this.toggleOpened();\n        }\n\n        this.setState({\n            hasGroup: this.props.options.some(option => !!(option.type === 'group' && !!option.content))\n        });\n    }\n\n    render(cn, SelectButton, Popup) {\n        let value = this.getValue();\n\n        return (\n            <div\n                className={ cn({\n                    mode: this.props.mode,\n                    size: this.props.size,\n                    width: this.props.width,\n                    disabled: this.props.disabled,\n                    checked: this.props.mode !== 'radio' && value.length > 0,\n                    focused: this.getFocused(),\n                    'has-label': !!this.props.label,\n                    'has-value': !!value,\n                    invalid: !!this.props.error\n                }) }\n                ref={ (root) => { this.root = root; } }\n            >\n                <span className={ cn('inner') }>\n                    <input\n                        id={ this.props.id }\n                        name={ this.props.name }\n                        type='hidden'\n                        value={ value }\n                    />\n                    {\n                        !!this.props.label &&\n                        <span className={ cn('top') }>\n                            { this.props.label }\n                        </span>\n                    }\n                    { this.renderButton(cn, SelectButton) }\n                    <Mq\n                        query='--small-only'\n                        touch={ true }\n                        onMatchChange={ this.handleMqMatchChange }\n                    >\n                        {\n                            this.props.mobileMenuMode === 'native' &&\n                            this.renderNativeSelect(cn)\n                        }\n                    </Mq>\n                    {\n                        (this.props.error || this.props.hint) &&\n                        <span className={ cn('sub') }>\n                            { this.props.error || this.props.hint }\n                        </span>\n                    }\n                    { this.renderPopup(cn, Popup) }\n                </span>\n            </div>\n        );\n    }\n\n    renderButton(cn, SelectButton) {\n        return (\n            <SelectButton\n                ref={ (button) => { this.button = button; } }\n                size={ this.props.size }\n                disabled={ this.props.disabled }\n                text={ this.renderButtonContent() }\n                rightAddons={ [\n                    <Icon\n                        key='addon-icon'\n                        className={ cn('tick') }\n                    />,\n                    <ResizeSensor key='addon-sensor' onResize={ this.updatePopupStyles } />\n                ] }\n                onClick={ this.handleButtonClick }\n                onFocus={ this.handleButtonFocus }\n                onBlur={ this.handleButtonBlur }\n            />\n        );\n    }\n\n    renderNativeSelect(cn) {\n        let isCheckMode = this.props.mode === 'check';\n        let hasEmptyOptGroup = isCheckMode || this.state.hasGroup;\n        let hasEmptyOption = !isCheckMode && !this.state.hasGroup;\n        let value = this.getValue();\n\n        if (!isCheckMode) {\n            value = value.length ? value[0] : '';\n        }\n\n        return (\n            <select\n                ref={ (nativeSelect) => { this.nativeSelect = nativeSelect; } }\n                className={ cn('native-control') }\n                disabled={ this.props.disabled }\n                multiple={ isCheckMode && 'multiple' }\n                value={ value }\n                onChange={ this.handleNativeOptionCheck }\n                onClick={ this.handleNativeClick }\n                onFocus={ this.handleNativeFocus }\n                onBlur={ this.handleNativeBlur }\n            >\n                {\n                    /*\n                        Хак с пустым <optgroup> — для фикса странного поведения select с атрибутом multiple на iOS7+:\n                        1. If no option is selected, it selects the first option in the list.\n                        2. If one option is selected, it deselects that option.\n                        3. If multiple options are selected, it deselects the last option to be tapped.\n                        4. If an option previously selected is deselected, it reselects the option.\n                        https://discussions.apple.com/message/23745665\n                        https://discussions.apple.com/message/24694954\n                    */\n                    hasEmptyOptGroup &&\n                    <optgroup\n                        disabled={ true }\n                        label={ this.props.placeholder }\n                    />\n                }\n                {\n                    hasEmptyOption &&\n                    <option disabled={ true } value=''>\n                        { this.props.placeholder }\n                    </option>\n                }\n                { this.renderNativeOptionsList(this.props.options) }\n            </select>\n        );\n    }\n\n    renderPopup(cn, Popup) {\n        let optionsList = this.renderOptionsList(this.props.options);\n        let opened = this.getOpened();\n        let value = this.getValue();\n\n        return (\n            <Popup\n                key='popup'\n                ref={ (popup) => { this.popup = popup; } }\n                for={ this.props.name }\n                autoclosable={ true }\n                className={ cn('popup') }\n                directions={ this.props.directions }\n                height='adaptive'\n                padded={ false }\n                size={ this.props.size }\n                target={ this.state.isMobile ? 'screen' : 'anchor' }\n                header={ this.state.isMobile && this.renderMobileHeader(cn) }\n                visible={ opened }\n                onClickOutside={ this.handleClickOutside }\n                minWidth={ this.state.popupStyles.minWidth }\n                maxWidth={ this.state.popupStyles.maxWidth }\n            >\n                <Menu\n                    ref={ (menu) => { this.menu = menu; } }\n                    className={ cn('menu') }\n                    size={ this.props.size }\n                    disabled={ this.props.disabled }\n                    mode={ this.props.mode }\n                    groupView={ this.props.groupView }\n                    content={ optionsList }\n                    onItemCheck={ this.handleOptionCheck }\n                    checkedItems={ value }\n                    onFocus={ this.handleMenuFocus }\n                    onBlur={ this.handleMenuBlur }\n                    onKeyDown={ this.handleMenuKeyDown }\n                />\n            </Popup>\n        );\n    }\n\n    renderOptionsList(options) {\n        return (\n            options.map((option) => {\n                if (option.type === 'group' && !!option.content) {\n                    let content = this.renderOptionsList(option.content);\n\n                    return ({\n                        type: 'group',\n                        title: option.title,\n                        content\n                    });\n                }\n\n                let content = option.description || option.text;\n\n                return ({\n                    value: option.value,\n                    content: createFragment({ icon: option.icon, content })\n                });\n            })\n        );\n    }\n\n    renderNativeOptionsList(options) {\n        let groupKey = 0;\n\n        return (\n            options.map((option) => {\n                if (option.type === 'group' && !!option.content) {\n                    let content = this.renderNativeOptionsList(option.content);\n\n                    groupKey += 1;\n\n                    return (\n                        <optgroup\n                            key={ `group_${groupKey}` }\n                            label={ option.title }\n                        >\n                            { content }\n                        </optgroup>\n                    );\n                }\n\n                return (\n                    <option\n                        key={ option.value }\n                        value={ option.value }\n                    >\n                        { option.nativeText || option.text }\n                    </option>\n                );\n            })\n        );\n    }\n\n    renderButtonContent() {\n        let checkedItems = this.getCheckedItems(this.props.options);\n\n        if (this.props.renderButtonContent) {\n            return this.props.renderButtonContent(checkedItems);\n        }\n\n        let checkedItemsText = checkedItems.map(item => item.checkedText || item.text).join(', ');\n        return checkedItemsText || this.props.placeholder;\n    }\n\n    renderMobileHeader(cn) {\n        return (\n            <PopupHeader\n                className={ cn('mobile-header') }\n                size={ this.props.size }\n                title={ this.props.mobileTitle || this.props.placeholder }\n                onCloseClick={ this.handlePopupCloseClick }\n            />\n        );\n    }\n\n    @autobind\n    handleButtonClick(event) {\n        if (!this.props.disabled) {\n            this.toggleOpened();\n        }\n\n        if (this.props.onClick) {\n            this.props.onClick(event);\n        }\n    }\n\n    @autobind\n    handleButtonKeyDown(event) {\n        if (!this.props.disabled) {\n            if (event.which === keyboardCode.ENTER || event.which === keyboardCode.SPACE) {\n                this.toggleOpened();\n            }\n        }\n\n        if (this.props.onKeyDown) {\n            this.props.onKeyDown(event);\n        }\n    }\n\n    @autobind\n    handleButtonFocus(event) {\n        this.setState({ buttonFocused: true });\n\n        if (this.props.onButtonFocus) {\n            this.props.onButtonFocus(this.getRevisedEvent(event));\n        }\n    }\n\n    @autobind\n    handleButtonBlur(event) {\n        this.setState({ buttonFocused: false });\n\n        if (this.props.onButtonBlur) {\n            this.props.onButtonBlur(this.getRevisedEvent(event));\n        }\n    }\n\n    @autobind\n    handleMenuFocus(event) {\n        event.target.value = this.getValue();\n\n        if (this.props.onFocus) {\n            this.props.onFocus(event);\n        }\n\n        if (this.props.onMenuFocus) {\n            this.props.onMenuFocus(event);\n        }\n    }\n\n    @autobind\n    handleMenuBlur(event) {\n        this.setState({\n            opened: false\n        });\n\n        event.target.value = this.getValue();\n\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n\n        if (this.props.onMenuBlur) {\n            this.props.onMenuBlur(event);\n        }\n    }\n\n    @autobind\n    handleOptionCheck(value) {\n        let opened = this.getOpened();\n\n        this.setState(\n            { value, opened: this.props.mode === 'check' },\n            () => {\n                // Если у Select-а закрылось выпадающее меню,\n                // то возвращаем фокус на кнопку Select\n                // после выбора опции.\n                let newOpened = this.getOpened();\n                if (!newOpened && opened !== newOpened) {\n                    this.button.focus();\n                }\n            }\n        );\n\n        if (this.props.onChange) {\n            this.props.onChange(value);\n        }\n    }\n\n    @autobind\n    handleNativeOptionCheck(event) {\n        function getFlattenedPropOptions(options) {\n            let result = [];\n\n            options.forEach((option) => {\n                if (option.type === 'group' && !!option.content) {\n                    let findInGroup = getFlattenedPropOptions(option.content);\n                    result = result.concat(findInGroup);\n                } else {\n                    result.push(option);\n                }\n            });\n\n            return result;\n        }\n\n        let hasEmptyOption = this.props.mode !== 'check' && !this.state.hasGroup;\n        let domOptions = Array.from(event.currentTarget.options).filter((option, index) => !(\n            hasEmptyOption && option.disabled && index === 0\n        ));\n        let flattenedPropOptions = getFlattenedPropOptions(this.props.options);\n        let value = domOptions.reduce((result, item, index) => {\n            if (item.selected) {\n                result.push(flattenedPropOptions[index].value);\n            }\n            return result;\n        }, []);\n\n        if (this.props.mode === 'radio' || this.props.mode === 'radio-check') {\n            this.blur();\n        }\n\n        this.setState({ value });\n\n        if (this.props.onChange) {\n            this.props.onChange(value);\n        }\n    }\n\n    @autobind\n    handleNativeClick(event) {\n        if (this.props.onClick) {\n            this.props.onClick(event);\n        }\n    }\n\n    @autobind\n    handleClickOutside() {\n        this.setState({\n            opened: false\n        });\n\n        if (this.props.onClickOutside) {\n            this.props.onClickOutside();\n        }\n    }\n\n    @autobind\n    handleMenuKeyDown(event, highlightedItem) {\n        let opened = this.getOpened();\n\n        switch (event.which) {\n            case keyboardCode.DOWN_ARROW:\n            case keyboardCode.UP_ARROW:\n                event.preventDefault();\n                this.syncKeyboardNavigationWithScroll(highlightedItem);\n                break;\n            case keyboardCode.ENTER:\n            case keyboardCode.SPACE:\n                event.preventDefault();\n                this.setState({\n                    opened: this.props.mode === 'check' ? true : !opened\n                });\n                this.focusOnMenu();\n                break;\n            case keyboardCode.ESCAPE:\n                event.preventDefault();\n                this.setState({\n                    opened: false\n                });\n                this.button.focus();\n                break;\n        }\n\n        if (this.props.onKeyDown) {\n            this.props.onKeyDown(event);\n        }\n    }\n\n    @autobind\n    handleNativeFocus(event) {\n        this.setState({\n            nativeFocused: true\n        });\n\n        if (this.props.onFocus) {\n            this.props.onFocus(this.getRevisedEvent(event));\n        }\n    }\n\n    @autobind\n    handleNativeBlur(event) {\n        this.setState({\n            nativeFocused: false\n        });\n\n        if (this.props.onBlur) {\n            this.props.onBlur(this.getRevisedEvent(event));\n        }\n    }\n\n    @autobind\n    handleMqMatchChange(isMatched) {\n        this.setState({ isMobile: isMatched });\n    }\n\n    @autobind\n    handlePopupCloseClick() {\n        this.setState({\n            opened: false\n        });\n    }\n\n    /**\n     * Устанавливает фокус на компонент.\n     *\n     * @public\n     */\n    focus() {\n        if (this.nativeSelect) {\n            this.nativeSelect.focus();\n        } else {\n            this.button.focus();\n\n            this.setState({\n                opened: true\n            }, () => {\n                this.focusOnMenu();\n            });\n        }\n    }\n\n    /**\n     * Убирает фокус с компонента.\n     *\n     * @public\n     */\n    blur() {\n        if (document.activeElement) {\n            document.activeElement.blur();\n        }\n    }\n\n    /**\n     * Скроллит страницу до компонента.\n     *\n     * @public\n     */\n    scrollTo() {\n        let elementRect = this.root.getBoundingClientRect();\n\n        scrollTo({\n            targetY: (elementRect.top + window.pageYOffset) - SCROLL_TO_CORRECTION\n        });\n    }\n\n    focusOnMenu() {\n        if (this.state.isMobile && this.props.mobileMenuMode === 'popup') return;\n\n        let scrollContainer = this.getScrollContainer();\n\n        let posX = scrollContainer.scrollTop;\n        let posY = scrollContainer.scrollLeft;\n\n        this.menu.focus();\n        scrollContainer.scrollTop = posX;\n        scrollContainer.scrollLeft = posY;\n    }\n\n    /**\n     * @param {MenuItem} highlightedItem Выбранный в текущий момент пункт меню\n     */\n    syncKeyboardNavigationWithScroll(highlightedItem) {\n        let element = highlightedItem.getNode();\n        let container = this.popup.getInnerNode();\n        let correction = element.offsetHeight;\n\n        if (element.offsetTop + correction > container.scrollTop + container.offsetHeight) {\n            scrollTo({\n                container,\n                targetY: element.offsetTop,\n                duration: SCROLL_TO_NORMAL_DURATION\n            });\n        } else if (element.offsetTop < container.scrollTop) {\n            scrollTo({\n                container,\n                targetY: (element.offsetTop - container.offsetHeight) + correction,\n                duration: SCROLL_TO_NORMAL_DURATION\n            });\n        }\n    }\n\n    toggleOpened() {\n        let newOpenedState = !this.getOpened();\n\n        this.setState(\n            { opened: newOpenedState },\n            () => {\n                if (newOpenedState) {\n                    this.focusOnMenu();\n                }\n            }\n        );\n    }\n\n    @autobind\n    updatePopupStyles() {\n        let buttonWidth = this.button.getNode().getBoundingClientRect().width;\n        let popupStyles = { minWidth: buttonWidth };\n\n        if (this.props.equalPopupWidth) {\n            popupStyles.maxWidth = buttonWidth;\n        }\n\n        this.setState({ popupStyles });\n    }\n\n    getCheckedItems(options) {\n        let value = this.getValue();\n        let result = [];\n\n        options.forEach((option) => {\n            if (option.type === 'group' && !!option.content) {\n                let findInGroup = this.getCheckedItems(option.content);\n                result = result.concat(findInGroup);\n            } else if (value.indexOf(option.value) !== -1) {\n                result.push(option);\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    getOpened() {\n        return this.props.opened !== undefined ? this.props.opened : this.state.opened;\n    }\n\n    getRevisedEvent(event) {\n        return { ...event, target: { ...event.target, value: this.getValue() } };\n    }\n\n    /**\n     * @returns {String|Number}\n     */\n    getValue() {\n        return this.props.value || this.state.value;\n    }\n\n    /**\n     * @returns {HTMLElement}\n     */\n    getScrollContainer() {\n        return this.context.positioningContainerElement || document.body;\n    }\n\n    /**\n     * Возвращает `true`, если компонент находится в состоянии фокуса.\n     *\n     * @returns {Boolean}\n     */\n    getFocused() {\n        return this.getOpened() || this.state.buttonFocused || this.state.nativeFocused;\n    }\n}\n\nexport default Select;\n"]}